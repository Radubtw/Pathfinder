A* (pronounced as "A star") is a computer algorithm that is widely used in pathfinding and graph traversal.
The algorithm efficiently plots a walkable path between multiple nodes, or points, on the graph.
On a map with many obstacles, pathfinding from points A to B can be difficult. A robot, for instance,
without getting much other direction, will continue until it encounters an obstacle, as in the path-finding
example to the left below.

However, the A* algorithm introduces a heuristic into a regular graph-searching algorithm, essentially planning
ahead at each step so a more optimal decision is made. With A*, a robot would instead find a path in a way similar
to the diagram on the right below.

A* is an extension of Dijkstra's algorithm with some characteristics of breadth-first search (BFS).
Like Dijkstra, A* works by making a lowest-cost path tree from the start node to the target node. What makes
A* different and better for many searches is that for each node, A* uses a function f(n)
f(n) that gives an estimate of the total cost of a path using that node. Therefore, A* is a heuristic function,
which differs from an algorithm in that a heuristic is more of an estimate and is not necessarily provably correct.

A* expands paths that are already less expensive by using this function:
                                        f(n) = g(n) + h(n)
where:
    *f(n) = total estimated cost of path through node n
    *g(n) = cost so far to reach node n
    *h(n) = estimated cost from n to goal. This is the heuristic part of the cost function, so it is like a guess.
